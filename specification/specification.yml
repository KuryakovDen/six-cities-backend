openapi: 3.0.1
info:
  title: API сервер для проекта «Шесть городов»
  description: |-
    * Список ресурсов и маршрутов сервера «Шесть городов».
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 1.0.0
tags:
  - name: users
    description: Действия с пользователями
  - name: offers
    description: Действия с офферами
  - name: comments
    description: Действия с комментариями
paths:
  /users/register:
    post:
      tags:
        - users
      summary: Регистрация пользователя
      description: Регистрирует нового пользователя

      requestBody:
        description: Данные для создания нового пользователя
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUser'
        required: true
      responses:
        "201":
          description: Пользователь успешно зарегистрирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        "400":
          description: Некорректные данные запроса
        "409":
          description: Пользоватьель с таким email уже существует
        "422":
          description: Ошибка валидации данных
  /users/login:
    post:
      tags:
        - users
      summary: Авторизация пользователя
      description: Авторизует пользователя по логину и паролю

      requestBody:
        description: Данные для авторизации пользователя
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authUser'
        required: true
      responses:
        "200":
          description: Пользователь авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        "400":
          description: Некорректные данные запроса
        "401":
          description: Неверные учетные данные (неверный email или пароль)
        "422":
          description: Ошибка валидации данных
    get:
      tags:
        - users
      summary: Проверка состояния пользователя
      description: Возвращает информацию по авторизованному пользователю

      responses:
        "200":
          description: Пользователь авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        "401":
          description: Пользователь не авторизован
  /users/logout:
    post:
      tags:
        - users
      summary: Выход из закрытой части приложения
      description: Сервис предоставляет ресурс для завершения пользовательского сеанса (доступен только авторизованным клиентам)

      responses:
        "204":
          description: Пользователь успешно вышел из системы
        "401":
          description: Пользователь не авторизован (отсутствует или недействительный токен)

  /users/{userId}/avatar:
    post:
      tags:
        - users
      summary: Загрузка аватара для пользователя
      description: Загружает аватар пользователя по userId. Изображение должно быть в формате `png` или `jpg`

      requestBody:
        description: Файл изображения аватара (png или jpg)
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
                  description: Файл изображения аватара (png или jpg)
        required: true

      responses:
        "200":
          description: Аватар успешно загружен
        "400":
          description: Некорректный запрос
        "401":
          description: Пользователь не авторизован (отсутствует или недействительный токен)
        "404":
          description: Пользователь с указанным userId не найден
        "413":
          description: Слишком большой файл

  /offers/list:
    get:
      tags:
        - offers
      summary: Получение списка всех предложений
      description: Пользователь получает список предложений по аренде (по умолчанию не более 60)
  /offers/create:
    post:
      tags:
        - offers
      summary: Создание оффера
      description: Пользователь создает оффер, передав необходимые данные для его создания
  /offers/{offerId}:
    get:
      tags:
        - offers
      summary: Получение детальной информации по офферу
      description: Пользователь получает всю необходимую информацию по офферу, передав offerId нужного оффера
    put:
      tags:
        - offers
      summary: Редактирование оффера
      description: Пользователь редактирует оффер, передав обновленные данные и offerId нужного оффера
    delete:
      tags:
        - offers
      summary: Удаление оффера
      description: Пользователь удаляет оффер, передав offerId нужного оффера
  /offers/{offerId}/favorites:
    post:
      tags:
        - offers
      summary: Добавление оффера в избранное
      description: Пользователь может добавить оффер в раздел "Избранное", передав offerId нужного оффера
    delete:
      tags:
        - offers
      summary: Удаление оффера из избранного
      description: Пользователь может удалить оффер из раздела "Избранное", передав offerId нужного оффера

  /comments/{offerId}:
    get:
      tags:
        - comments
      summary: Получение списка комментариев для оффера
      description: Пользователь может получить список всех комментариев для оффера, передав offerId нужного оффера
    post:
      tags:
        - comments
      summary: Создание комментария для оффера
      description: Пользователь может создать комментарий для оффера, передав offerId нужного оффера и данные комментария

components:
  schemas:
    createUser:
      type: object

      properties:
        name:
          type: string
          example: Denis
          description: Имя пользователя

        email:
          type: string
          format: email
          example: test@yandex.ru
          description: Email пользователя

        password:
          type: string
          example: 123456
          minLength: 6
          description: Пароль пользователя

        avatar:
          type: string
          example: avatar.jpg
          description: URL аватара пользователя (необязательный)

        userType:
          type: string
          example: standard
          enum: [standard, pro]
          description: Тип пользователя (standard или pro)

    authUser:
      type: object

      properties:
        email:
          type: string
          format: email
          example: test@yandex.ru
          description: Email пользователя

        password:
          type: string
          example: 12345
          description: Пароль пользователя

    user:
      type: object

      properties:
        id:
          type: string
          example: 6329c3d6a04ab1061c6425ea
          description: ID пользователя

        email:
          type: string
          format: email
          example: test@yandex.ru
          description: Email пользователя

        avatar:
          type: string
          example: avatar.jpg
          description: URL аватара пользователя (необязательный)

        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6
          description: JWT access токен

    offer:
      type: object
      required:
        - title
        - description
        - publicationDate
        - city
        - previewImage
        - housingPhotos
        - isPremium
        - isFavorites
        - rating
        - housingType
        - roomsCount
        - guestsCount
        - rentalPrice
        - conveniences
        - user
        - coordinates

      properties:
        id:
          type: string
          example: 6329c3d6a04ab1061c6425ea
          description: ID оффера
        title:
          type: string
          example: Уютная квартира в центре Парижа
          description: Заголовок оффера
        description:
          type: string
          example: Современная квартира с панорамными окнами и стильным интерьером.
          description: Описание оффера
        publicationDate:
          type: string
          format: date-time
          example: "2025-03-12T13:08:00.000Z"
          description: Дата публикации оффера
        city:
          type: object
          required:
            - city
            - coordinates
          properties:
            city:
              type: string
              enum:
                - Paris
                - Cologne
                - Brussels
                - Amsterdam
                - Hamburg
                - Dusseldorf
              example: Paris
              description: Название города
            coordinates:
              type: object
              required:
                - latitude
                - longitude
              properties:
                latitude:
                  type: number
                  format: float
                  example: 48.8566
                  description: Широта города
                longitude:
                  type: number
                  format: float
                  example: 2.3522
                  description: Долгота города
          description: Информация о городе и координатах
        previewImage:
          type: string
          format: url
          example: "https://example.com/images/paris_apartment_preview.jpg"
          description: URL превью оффера
        housingPhotos:
          type: array
          items:
            type: string
            format: url
            example:
              - "https://example.com/images/paris_apartment_1.jpg"
              - "https://example.com/images/paris_apartment_2.jpg"
            description: Спискок URL-фотографий оффера
        isPremium:
          type: boolean
          example: true
          description: Флаг того, является ли оффер премиальным
        isFavorite:
          type: boolean
          example: false
          description: Флаг того, находится ли оффер в разделе "Избранное"
        rating:
          type: number
          format: float
          example: 4.8
          description: Рейтинг оффера (от 1 до 5)
        housingType:
          type: string
          example: apartment
          enum:
            - apartment
            - house
            - room
            - hotel
        roomsCount:
          type: number
          format: int32
          example: 2
          description: Количество комнат
        guestsCount:
          type: number
          format: int32
          example: 4
          description: Количество гостей
        rentalPrice:
          type: number
          format: int32
          example: 1000
          description: Цена аренды
        conveniences:
          type: array
          items:
            type: string
          example:
            - "Breakfast"
            - "Fridge"
            - "Washer"
          description: Список удобств
        user:
          $ref: '#/components/schemas/user'
          description: Информация о пользователе
        commentsCount:
          type: number
          format: int32
          example: 12
          description: Количество комментариев к офферу (необязательное поле)
        coordinates:
          type: object
          required:
            - latitude
            - longitude
          properties:
              latitude:
                type: number
                format: float
                example: 48.8566
                description: Широта местоположения оффера
              longitude:
                type: number
                format: float
                example: 2.3522
                description: Долгота местоположения оффера
          description: Географические координаты предложения





